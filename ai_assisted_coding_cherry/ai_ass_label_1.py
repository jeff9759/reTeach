# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/ai_assisted_label_1.ipynb.

# %% auto 0
__all__ = ['apply_color', 'classify_unlabeled_texts', 'classify_unlabeled_texts_all', 'ai_assisted_labeling']

# %% ../nbs/ai_assisted_label_1.ipynb 1
import os
import pandas as pd
import openai
import random
import re

# %% ../nbs/ai_assisted_label_1.ipynb 2
def apply_color(val):
    # create a color 

    if float(val) > 0.7:
        color = 'green'
    elif float(val) < 0.3:
        color = 'red'
    else:
        color = "yellow"

    return f'background-color: {color}'

# %% ../nbs/ai_assisted_label_1.ipynb 5
def classify_unlabeled_texts(df, text_column, label_column):
    # Filter to get labeled examples for the prompt
    labeled_examples = df[df[label_column].notna()]
    openai.api_key = os.getenv('OPENAI_API_KEY')

    # Iterate over rows that need classification
    for index, row in df[df[label_column].isna()].iterrows():
        messages = [{"role": "system", "content": "The following are examples of texts and their classifications, the label is either 'OTR', 'PRS', 'REP', or 'NEU'. 'OTR' stands for 'An opportunity to respond' (e.g., 'What color is this candy?'), 'PRS' stands for 'Praise' (e.g., 'Great job, Morgan!'), 'REP' stands for 'Reprimand' (e.g., 'You need to keep quiet while someone else is reading.) and 'NEU' stands for 'None of the above':"}]
        
        # Add few-shot learning examples
        for _, example_row in labeled_examples.iterrows():
            example = f"Text: {example_row[text_column]}\nLabel: {example_row[label_column]}"
            messages.append({"role": "user", "content": example})

        # Add the text to be classified
        text_to_classify = row[text_column]
        messages.append({"role": "user", "content": f"Text: {text_to_classify}\nLabel:"})

        # Make the request to OpenAI's chat API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages
        )

        # Update the DataFrame with the classified label
        classified_label = response.choices[0].message['content'].strip()
        df.at[index, label_column] = classified_label

    return df

# %% ../nbs/ai_assisted_label_1.ipynb 6
def classify_unlabeled_texts_all(df, text_column, label_column):
    # Filter to get labeled examples for the prompt
    labeled_examples = df[df[label_column].notna()]
    openai.api_key = os.getenv('OPENAI_API_KEY')

    messages = [{"role": "user", "content": "The following are examples of texts and their classifications, the label is either 'OTR', 'PRS', 'REP', or 'NEU'. 'OTR' stands for 'An opportunity to respond' (e.g., 'What color is this candy?'), 'PRS' stands for 'Praise' (e.g., 'Great job, Morgan!'), 'REP' stands for 'Reprimand' (e.g., 'You need to keep quiet while someone else is reading.) and 'NEU' stands for 'None of the above':"}]
        
        # Add few-shot learning examples
    few_shot_examples_texts = "Texts: "
    
    for _, example_row in labeled_examples.iterrows():
        few_shot_examples_texts += f"{example_row[text_column]}\n"

    few_shot_examples_labels = "\n\nLabels: "

    for _, example_row in labeled_examples.iterrows():
        few_shot_examples_labels += f"Labels: {example_row[label_column]}\n"

    messages.append({"role": "user", "content": few_shot_examples_texts + few_shot_examples_labels})

    text_to_classify = "Texts:"

    # Iterate over rows that need classification
    for index, row in df[df[label_column].isna()].iterrows():
        # Add the text to be classified
        text_to_classify += f"{row[text_column]}\n"

    text_to_classify += "\n\nLabels: "

    messages.append({"role": "user", "content": f"Texts: {text_to_classify}"})

        # Make the request to OpenAI's chat API
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
    )
    
    contents = response.choices[0].message['content'].strip()
    # Extract all the labels
    # use regex to extract the labels 'OTR', 'PRS', 'REP', or 'NEU' from the response
    regex = r"(OTR|PRS|REP|NEU)"
    classified_labels = re.findall(regex, contents)
    # Update the DataFrame with the classified label
    
    for index, row in df[df[label_column].isna()].iterrows():
        df.at[index, label_column] = classified_labels.pop(0)

    return df

# %% ../nbs/ai_assisted_label_1.ipynb 7
def ai_assisted_labeling(uploaded_file):
    # Placeholder for AI Labeling Logic
    df = pd.read_csv(uploaded_file.name, encoding='utf-8')

    df = df[['Text', 'Label']]
    # Process the dataframe
    # prompt = generate_prompt(df)

    # response = inference_by_openai(prompt)

    # add random confidence score to each row in confidence column, the confidence score is between 0 and 1
    df['Confidence'] = [round(random.random(), 2) for _ in range(len(df))]
    
    # set confidence as 1 is the label is in a valid list of labels
    df.loc[df['Label'].isin(['PRS', 'OTR', 'REP', 'NEU']), 'Confidence'] = 1
    
    # def apply_color(var):
    #     color = 'red' if var is None else 'green'
    #     return f'background-color: {color}'

    style_df = df.style.applymap(apply_color, subset=['Confidence'])

    df = classify_unlabeled_texts(df, 'Text', 'Label')

    # Save the new dataframe to a CSV file
    new_filename = uploaded_file.name.split('.')[0] + '_AI_assisted.csv'
    df.to_csv(new_filename, index=False)
    

    return style_df.to_html(), new_filename
